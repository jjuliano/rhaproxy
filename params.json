{"name":"Rhaproxy","tagline":"Rhaproxy is a gem providing a ruby interface to HAproxy TCP/HTTP Load Balancer.","body":"Rhaproxy - HAproxy Load Balancer for Ruby\r\n=========================================\r\n\r\nRhaproxy is a gem providing a ruby interface to HAproxy TCP/HTTP Load Balancer.\r\n\r\nTo install, type 'gem install rhaproxy'\r\n\r\n### Why RHAProxy?\r\n\r\nRHAProxy creates simple and small development tools that help you design,\r\ndevelop, deploy cloud infrastractures for your enterprise software systems.\r\n\r\n#### RHAProxy Pro: A Commercial, Supported Version of RHAProxy\r\nRHAProxy Pro is a collection of useful functionality for the open source RHAProxy library with priority support via Remote access or Skype from the author, new features in-demand, upgrades and lots more.\r\n\r\nSales of RHAProxy Pro also benefit the community by ensuring that RHAProxy itself will remain well supported for the foreseeable future.\r\n\r\n#### Licensing\r\nRHAProxy is available under the terms of the GNU LGPLv3 license.\r\n\r\nIn addition to its useful functionality, buying RHAProxy Pro grants your organization a RHAProxy Commercial License instead of the GNU LGPL, avoiding any legal issues your lawyers might raise. Please contact joelbryan.juliano@gmail.com for further detail on licensing including options for embedding RHAProxy Pro in your own products.\r\n\r\n#### Buy RHAProxy Pro\r\nContact me via joelbryan.juliano@gmail.com, and Pay via Paypal: https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=GFG3UVMX2FDEY\r\n\r\n### Usage:\r\n\r\n```ruby\r\n      require 'rubygems'\r\n      require 'rhaproxy'\r\n\r\n      global = RhaproxyGlobal.new\r\n      global.daemon = true\r\n      global.maxconn = 256\r\n\r\n      defaults = RhaproxyDefaults.new\r\n      defaults.mode(\"http\")\r\n      defaults.timeout_connect(\"5000ms\")\r\n      defaults.timeout_client(\"50000ms\")\r\n      defaults.timeout_server(\"50000ms\")\r\n\r\n      frontend = RhaproxyFrontend.new\r\n      frontend.name(\"http-in\")\r\n      frontend.default_backend(\"servers\")\r\n\r\n      backend = RhaproxyBackend.new\r\n      backend.name(\"servers\")\r\n      backend.server(\"server1 127.0.0.1:8000 maxconn 32\")\r\n\r\n      config = Array.new\r\n      config.push([global.config])\r\n      config.push([defaults.config])\r\n      config.push([frontend.config])\r\n      config.push([backend.config])\r\n\r\n      haproxy_conf_file = File.new(\"haproxy.conf\", \"w+\")\r\n      haproxy_conf_file.puts(config)\r\n      haproxy_conf_file.close\r\n```\r\n\r\nhaproxy.conf:\r\n\r\n```ruby\r\n      global\r\n        daemon\r\n        maxconn 256\r\n\r\n      defaults\r\n        mode http\r\n        timeout client 50000ms\r\n        timeout connect 5000ms\r\n        timeout server 50000ms\r\n\r\n      frontend http-in\r\n        default_backend servers\r\n\r\n      backend servers\r\n        server server1 127.0.0.1:8000 maxconn 32\r\n```\r\n\r\n### Donations\r\n\r\nPlease support independent cloud computing toolkits, also money donated to the project will benefit the community by ensuring that RHAProxy itself will remain well supported for the foreseeable future. To Donate, please visit: https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=KT9CY4T7BYDM4\r\n","google":"UA-57800038-1","note":"Don't delete this file! It's used internally to help with page regeneration."}